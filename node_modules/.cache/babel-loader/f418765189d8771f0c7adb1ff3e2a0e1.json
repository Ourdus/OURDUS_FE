{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  // send username, password to the SERVER\n  executeJwtAuthenticationService(email, name, password, tel, point, writerFlag) {\n    const data = {\n      email,\n      name,\n      password,\n      tel,\n      point,\n      writerFlag\n    };\n    return axios.post('api/user/join', {\n      email,\n      name,\n      password,\n      tel,\n      point,\n      writerFlag\n    });\n  }\n\n  executeHelloService() {\n    console.log(\"===executeHelloService===\");\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    console.log(\"===registerSuccessfulLoginForJwt===\");\n    localStorage.setToken('token', token);\n    localStorage.setItem('authenticatedUser', username); // sessionStorage.setItem('authenticatedUser', username)\n    //this.setupAxiosInterceptors(this.createJWTToken(token))\n\n    this.setupAxiosInterceptors();\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupAxiosInterceptors() {\n    axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        config.headers['Authorization'] = 'Bearer ' + token;\n      } // config.headers['Content-Type'] = 'application/json';\n\n\n      return config;\n    }, error => {\n      Promise.reject(error);\n    });\n  }\n\n  logout() {\n    localStorage.removeItem(\"authenticatedUser\");\n    localStorage.removeItem(\"token\");\n  }\n\n  isUserLoggedIn() {\n    const token = localStorage.getItem('token');\n    console.log(\"===UserloggedInCheck===\");\n    console.log(token);\n\n    if (token) {\n      return true;\n    }\n\n    return false;\n  }\n\n  withdrawUser() {\n    const token = localStorage.getItem('token');\n    return axios.delete('api/t/user/delete', {\n      token\n    });\n  }\n\n  getLoggedInUserName() {\n    //let user = sessionStorage.getItem('authenticatedUser')\n    let user = localStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/Kimbangg/Desktop/OURDUS_FE/src/components/views/LoginPage/ AuthenticationService.js"],"names":["axios","AuthenticationService","executeJwtAuthenticationService","email","name","password","tel","point","writerFlag","data","post","executeHelloService","console","log","registerSuccessfulLoginForJwt","username","token","localStorage","setToken","setItem","setupAxiosInterceptors","createJWTToken","interceptors","request","use","config","getItem","headers","error","Promise","reject","logout","removeItem","isUserLoggedIn","withdrawUser","delete","getLoggedInUserName","user"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxB;AACAC,EAAAA,+BAA+B,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAuBC,GAAvB,EAA4BC,KAA5B,EAAmCC,UAAnC,EAA+C;AAC1E,UAAMC,IAAI,GAAG;AACTN,MAAAA,KADS;AACFC,MAAAA,IADE;AACIC,MAAAA,QADJ;AACaC,MAAAA,GADb;AACkBC,MAAAA,KADlB;AACyBC,MAAAA;AADzB,KAAb;AAGA,WAAOR,KAAK,CAACU,IAAN,CAAW,eAAX,EAA4B;AAC/BP,MAAAA,KAD+B;AAE/BC,MAAAA,IAF+B;AAG/BC,MAAAA,QAH+B;AAI/BC,MAAAA,GAJ+B;AAK/BC,MAAAA,KAL+B;AAM/BC,MAAAA;AAN+B,KAA5B,CAAP;AAQH;;AAEDG,EAAAA,mBAAmB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH;;AAEDC,EAAAA,6BAA6B,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3CJ,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAI,IAAAA,YAAY,CAACC,QAAb,CAAsB,OAAtB,EAA+BF,KAA/B;AACAC,IAAAA,YAAY,CAACE,OAAb,CAAqB,mBAArB,EAA0CJ,QAA1C,EAH2C,CAI3C;AACA;;AACA,SAAKK,sBAAL;AACH;;AAEDC,EAAAA,cAAc,CAACL,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDI,EAAAA,sBAAsB,GAAG;AACrBpB,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAI;AACN,YAAMT,KAAK,GAAGC,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIV,KAAJ,EAAW;AACPS,QAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,YAAYX,KAA9C;AACH,OAJK,CAKN;;;AACA,aAAOS,MAAP;AACH,KARL,EASIG,KAAK,IAAI;AACLC,MAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,KAXL;AAYH;;AAEDG,EAAAA,MAAM,GAAG;AACLd,IAAAA,YAAY,CAACe,UAAb,CAAwB,mBAAxB;AACAf,IAAAA,YAAY,CAACe,UAAb,CAAwB,OAAxB;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,UAAMjB,KAAK,GAAGC,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;;AAEA,QAAIA,KAAJ,EAAW;AACP,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDkB,EAAAA,YAAY,GAAG;AACX,UAAMlB,KAAK,GAAGC,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;AACA,WAAO1B,KAAK,CAACmC,MAAN,CAAa,mBAAb,EAAkC;AACrCnB,MAAAA;AADqC,KAAlC,CAAP;AAGH;;AAEDoB,EAAAA,mBAAmB,GAAG;AAClB;AACA,QAAIC,IAAI,GAAGpB,YAAY,CAACS,OAAb,CAAqB,mBAArB,CAAX;AACA,QAAGW,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AA7EuB;;AAgF5B,eAAe,IAAIpC,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n    // send username, password to the SERVER\n    executeJwtAuthenticationService(email, name, password,tel, point, writerFlag) {\n        const data = {\n            email, name, password,tel, point, writerFlag\n          }\n        return axios.post('api/user/join', {\n            email, \n            name,\n            password,\n            tel,\n            point,\n            writerFlag, \n        })\n    }\n\n    executeHelloService() {\n        console.log(\"===executeHelloService===\")    \n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        console.log(\"===registerSuccessfulLoginForJwt===\")\n        localStorage.setToken('token', token);\n        localStorage.setItem('authenticatedUser', username);\n        // sessionStorage.setItem('authenticatedUser', username)\n        //this.setupAxiosInterceptors(this.createJWTToken(token))\n        this.setupAxiosInterceptors();\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    setupAxiosInterceptors() {\n        axios.interceptors.request.use(\n            config => {\n                const token = localStorage.getItem('token');\n                if (token) {\n                    config.headers['Authorization'] = 'Bearer ' + token;\n                }\n                // config.headers['Content-Type'] = 'application/json';\n                return config;\n            },\n            error => {\n                Promise.reject(error)\n            });\n    }\n\n    logout() {\n        localStorage.removeItem(\"authenticatedUser\");\n        localStorage.removeItem(\"token\");\n    }\n\n    isUserLoggedIn() {\n        const token = localStorage.getItem('token');\n        console.log(\"===UserloggedInCheck===\");\n        console.log(token);\n\n        if (token) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    withdrawUser() {\n        const token = localStorage.getItem('token');\n        return axios.delete('api/t/user/delete', {\n            token\n        })\n    }\n\n    getLoggedInUserName() {\n        //let user = sessionStorage.getItem('authenticatedUser')\n        let user = localStorage.getItem('authenticatedUser');\n        if(user===null) return '';\n        return user;\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}