{"ast":null,"code":"import axios from 'axios';\nexport const instance = axios.create({}); // instance.defaults.headers['Content-Type'] = 'application/json';\n\nexport const checkHeader = () => {\n  console.log(\"checkHeader:  \" + instance.defaults.headers.common['jwt-auth-token']);\n  console.log(\"check에서 확인한 cookie는: \" + document.cookie);\n};\nexport const setJwt = token => {\n  // 'jwt-auth-token' 자리는 백엔드에서 설정한 토큰 명을 삽입 해주어야 한다.\n  instance.defaults.headers.common['jwt-auth-token'] = token;\n  console.log(\"setJwt:  \" + instance.defaults.headers.common['jwt-auth-token']); // 새로고침을 할 때마다, 날라가는 것을 방지하기 위해 쿠기에 저장\n\n  setCookie('jwt-auth-token', token);\n  console.log(\"set에서 확인한 cookie는: \" + document.cookie); //cookie setting\n};\nexport const getJwt = uri => {\n  //cookie get, header에 새로 update\n  console.log(\"getJwt:  \" + instance.defaults.headers.common['jwt-auth-token']);\n  instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n  console.log(\"get에서 cookie로 넣어준:  \" + instance.defaults.headers.common['jwt-auth-token']);\n  return axios.get(uri, {\n    headers: {\n      'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n    }\n  });\n};\nexport const PostJwt = (uri, data) => {\n  instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n  return axios.post(uri, data, {\n    headers: {\n      'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n    }\n  });\n};\n_c = PostJwt;\nexport const deleteJwt = uri => {\n  instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n  return axios.delete({\n    headers: {\n      'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n    }\n  });\n};\nexport const LogoutJwt = () => {\n  deleteCookie('jwt-auth-token');\n  delete instance.defaults.headers.common['jwt-auth-token'];\n};\n/*하단은 쿠키 사용 함수들, document.cookie 접근을 활용하며 정규표현식을 이용해 name을 구분한다.\n참고: https://ko.javascript.info/cookie\n*/\n\n_c2 = LogoutJwt;\n\nfunction getCookie(name) {\n  let matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n  return matches ? decodeURIComponent(matches[1]) : undefined;\n}\n\nfunction setCookie(name, value, options = {}) {\n  options = {\n    path: '/',\n    // 필요한 경우, 옵션 기본값을 설정할 수도 있습니다.\n    ...options\n  };\n\n  if (options.expires instanceof Date) {\n    options.expires = options.expires.toUTCString();\n  }\n\n  let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n  for (let optionKey in options) {\n    updatedCookie += \"; \" + optionKey;\n    let optionValue = options[optionKey];\n\n    if (optionValue !== true) {\n      updatedCookie += \"=\" + optionValue;\n    }\n  }\n\n  document.cookie = updatedCookie;\n}\n\nfunction deleteCookie(name) {\n  setCookie(name, \"\", {\n    'max-age': -1\n  });\n} // export default {instance, checkHeader, setJwt, getJwt, PostJwt};\n\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostJwt\");\n$RefreshReg$(_c2, \"LogoutJwt\");","map":{"version":3,"sources":["/Users/Kimbangg/Desktop/OURDUS_FE/src/components/views/LoginPage/TokenConfig.js"],"names":["axios","instance","create","checkHeader","console","log","defaults","headers","common","document","cookie","setJwt","token","setCookie","getJwt","uri","getCookie","get","PostJwt","data","post","deleteJwt","delete","LogoutJwt","deleteCookie","name","matches","match","RegExp","replace","decodeURIComponent","undefined","value","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const instance = axios.create({\n    });\n// instance.defaults.headers['Content-Type'] = 'application/json';\n        \nexport const checkHeader = () => {\n    console.log(\"checkHeader:  \" + instance.defaults.headers.common['jwt-auth-token']);\n    console.log(\"check에서 확인한 cookie는: \" + document.cookie);\n}\n\nexport const setJwt = (token) => {\n    // 'jwt-auth-token' 자리는 백엔드에서 설정한 토큰 명을 삽입 해주어야 한다.\n    instance.defaults.headers.common['jwt-auth-token'] = token;\n    console.log(\"setJwt:  \" + instance.defaults.headers.common['jwt-auth-token']);\n    // 새로고침을 할 때마다, 날라가는 것을 방지하기 위해 쿠기에 저장\n    setCookie('jwt-auth-token', token);\n    console.log(\"set에서 확인한 cookie는: \" + document.cookie);\n    //cookie setting\n}\n\nexport const getJwt = (uri) => {\n    //cookie get, header에 새로 update\n    console.log(\"getJwt:  \" + instance.defaults.headers.common['jwt-auth-token']);\n    instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n    console.log(\"get에서 cookie로 넣어준:  \" + instance.defaults.headers.common['jwt-auth-token']);\n    return axios\n    .get(uri,{\n      headers:{\n      'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n      }\n    })\n}\n\nexport const PostJwt = (uri, data) => {\n    instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n    return axios.post(uri, data, {\n        headers: {\n            'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n        }\n    })\n}\n\nexport const deleteJwt = (uri) =>{\n    instance.defaults.headers.common['jwt-auth-token'] = getCookie('jwt-auth-token');\n    return axios.delete({\n      headers: {\n          'jwt-auth-token': instance.defaults.headers.common['jwt-auth-token']\n      }\n  })\n}\n\nexport const LogoutJwt = () =>{\n  deleteCookie('jwt-auth-token');\n  delete instance.defaults.headers.common['jwt-auth-token'];\n}\n\n\n/*하단은 쿠키 사용 함수들, document.cookie 접근을 활용하며 정규표현식을 이용해 name을 구분한다.\n참고: https://ko.javascript.info/cookie\n*/\n\nfunction getCookie(name) {\n    let matches = document.cookie.match(new RegExp(\n      \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\n    ));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n  }\n\nfunction setCookie(name, value, options = {}) {\n\n    options = {\n      path: '/',\n      // 필요한 경우, 옵션 기본값을 설정할 수도 있습니다.\n      ...options\n    };\n  \n    if (options.expires instanceof Date) {\n      options.expires = options.expires.toUTCString();\n    }\n  \n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n  \n    for (let optionKey in options) {\n      updatedCookie += \"; \" + optionKey;\n      let optionValue = options[optionKey];\n      if (optionValue !== true) {\n        updatedCookie += \"=\" + optionValue;\n      }\n    }\n  \n    document.cookie = updatedCookie;\n}\n\nfunction deleteCookie(name) {\n    setCookie(name, \"\", {\n      'max-age': -1\n    })\n  }\n\n// export default {instance, checkHeader, setJwt, getJwt, PostJwt};\n"]},"metadata":{},"sourceType":"module"}